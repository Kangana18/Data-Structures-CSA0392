#include <stdio.h>
#include <stdlib.h>
// Structure for a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};
// Function to create a new node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
// Function to insert a new node into the binary tree
struct TreeNode* insert(struct TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}
// Function to find the minimum element in the binary tree
int findMin(struct TreeNode* root) {
    if (root == NULL) {
        printf("Tree is empty.\n");
        return -1; // Return a sentinel value to indicate an empty tree
    }
    while (root->left != NULL) {
        root = root->left;
    }
    return root->data;
}
// Function to find the maximum element in the binary tree
int findMax(struct TreeNode* root) {
    if (root == NULL) {
        printf("Tree is empty.\n");
        return -1; // Return a sentinel value to indicate an empty tree
    }
    while (root->right != NULL) {
        root = root->right;
    }
    return root->data;
}
int main() {
    struct TreeNode* root = NULL;   
    // Insert elements into the binary tree
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);
    // Find and print the minimum and maximum elements
    printf("Minimum element: %d\n", findMin(root));
    printf("Maximum element: %d\n", findMax(root));
    return 0;
}
